/**
Each new term in the Fibonaci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21,34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
*/

using System;
using System.Collections;
using System.Collections.Generic;

namespace ProjectEulerProblem2 
{
	public class FibonacciSequence 
	{
		public static int[] Generate(int countLimit)
		{
			// Create new list object and append values 1 and 2
			List<int> sequenceList = new List<int>();
			sequenceList.Add(1);
			sequenceList.Add(2);

			if (countLimit <= 0)
			{
				var emptyArray = new int[0];
				return emptyArray;
			}

			else if (countLimit > 0 && countLimit < 3 )
			{
				switch (countLimit)
				{
					case 1: 
						var singleElementArray = new int[1];
						singleElementArray[0] = 1;
						return singleElementArray;
					case 2:
						var twoElementArray = sequenceList.ToArray();
						return twoElementArray;
				}
			}

			int limit = countLimit - 2; // Remove the two default entries
			int rightIndex; // To store the last Fibonacci term
			int leftIndex; // To store the second to last Fibonacci term
			int fibonacciTerm; // To store the next Fibonacci term

			while (sequenceList.Count <= limit)
			{
				// Calculate and assign the last two index values of the list
				rightIndex = sequenceList.Count - 2;
				leftIndex = sequenceList.Count - 1;

				// Calculate and append the next Fibonacci term
				fibonacciTerm = sequenceList[leftIndex] + sequenceList[rightIndex];
				sequenceList.Add(fibonacciTerm);
			}

			// Convert list to array and return
			int[] sequenceArray = sequenceList.ToArray();
			return sequenceArray;
		}
	}
	public class Solution
	{
		public static void Main(String[] args)
		{
			string directory = @"C:/Users/Public/problem2_solution.txt";

			int[] sequenceInt;
			int arrayLength;
			string[] lines;
			int lastFibonacciTerm = 0;
			int count = 0;

			while (lastFibonacciTerm < 4000000)
			{
				sequenceInt = FibonacciSequence.Generate(count);
				lastFibonacciTerm =  sequenceInt[sequenceInt.Length - 1];
			}

			lines = new string[sequenceInt.Length];

			// System.IO.File.WriteAllLines(directory, text);

		}
	}
}


